{"version":3,"sources":["redux/user/index.ts","components/header/index.tsx","pages/home/index.tsx","redux/types.ts","redux/javascript/questions.ts","redux/javascript/index.ts","components/boolean-quiz/index.tsx","redux/index.ts","components/multi-choice-quiz/index.tsx","pages/finalize-answer/index.tsx","pages/javascript-quiz/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["userSlice","createSlice","name","initialState","score","reducers","incrementScoreBy","reducer","state","payload","prepare","incrementScoreByActionCreator","actions","userScoreSelector","user","Header","useSelector","className","size","data-testid","Home","to","QBOOLEAN","questions","type","title","answer","options","key","value","userAnswer","javascriptSlice","totalQuestions","length","setAnswer","index","restAnswers","questionLengthSelector","javascript","setAnswerActionCreator","resetAnswerActionCreator","BooleanQuiz","props","text","handleChange","status","handleAnswerChange","join","htmlFor","id","checked","onChange","disabled","combineReducers","configureStore","MultiChoiceQuiz","map","convertAnswer","String","modalStyles","content","backgroundColor","FinalizeAnswer","lang","language","store","dispatch","useDispatch","history","useHistory","useState","isModalOpen","setModalOpen","closeModal","stats","reduce","s","mark","ignoredQuestions","correctQuestions","incorrectQuestions","useEffect","isOpen","shouldCloseOnOverlayClick","onRequestClose","style","ariaHideApp","onClick","end","replace","question","comp","JavaScriptQuizs","questionNumber","setQuestionNumber","prv","App","exact","path","component","memo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7fe2e9d.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { IState } from \"../types\";\r\n\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    score: 0,\r\n  },\r\n  reducers: {\r\n    incrementScoreBy: {\r\n      reducer(state, { payload }: PayloadAction<number>) {\r\n        state.score += payload;\r\n      },\r\n      prepare(payload: number = 2) {\r\n        return { payload };\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  incrementScoreBy: incrementScoreByActionCreator,\r\n} = userSlice.actions;\r\n\r\nconst userScoreSelector = (state: IState) => {\r\n  return state.user.score;\r\n};\r\n\r\nexport { userScoreSelector };\r\n\r\nexport default userSlice.reducer;\r\n","import { useSelector } from \"react-redux\";\r\nimport { MdCode } from \"react-icons/md\";\r\n\r\nimport \"./header.scss\";\r\nimport { userScoreSelector } from \"../../redux/user\";\r\n\r\nfunction Header() {\r\n  const score = useSelector(userScoreSelector);\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"container header__content\">\r\n        <MdCode size=\"3rem\" className=\"header__logo\" />\r\n        <b className=\"header__score\">\r\n          <span data-testid=\"score\">{score} ~ score</span>\r\n        </b>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { Link } from \"react-router-dom\";\r\nimport { MdAssignment } from \"react-icons/md\";\r\n\r\nimport \"./home.scss\";\r\nimport Header from \"../../components/header\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <main className=\"home\">\r\n      <Header />\r\n      <section className=\"intro\">\r\n        <div className=\"container\">\r\n          <h1 className=\"intro__title\">Quiz App</h1>\r\n          <p className=\"intro__text\">\r\n            Place to test your skills by attending{\" \"}\r\n            <em>\r\n              <b>basic</b>\r\n            </em>{\" \"}\r\n            quick test.\r\n          </p>\r\n        </div>\r\n      </section>\r\n      <div className=\"container questions\">\r\n        <article className=\"quiz-card quiz-card--html\">\r\n          <h2 className=\"quiz-card__title\">HTML</h2>\r\n          <p className=\"quiz-card__desc\">\r\n            This module contains ten basic questions to test your HTML knowlage.\r\n          </p>\r\n          <Link to=\"/html\" className=\"quiz-card__link\">\r\n            <MdAssignment /> take test\r\n          </Link>\r\n        </article>\r\n        <article className=\"quiz-card quiz-card--css\">\r\n          <h2 className=\"quiz-card__title\">CSS</h2>\r\n          <p className=\"quiz-card__desc\">\r\n            This module contains ten basic questions to test your CSS knowlage.\r\n          </p>\r\n          <Link to=\"/css\" className=\"quiz-card__link\">\r\n            <MdAssignment /> take test\r\n          </Link>\r\n        </article>\r\n        <article className=\"quiz-card quiz-card--js\">\r\n          <h2 className=\"quiz-card__title\">JavaScript</h2>\r\n          <p className=\"quiz-card__desc\">\r\n            This module contains ten basic questions to test your JavaScript\r\n            knowlage.\r\n          </p>\r\n          <Link to=\"/javascript\" className=\"quiz-card__link\">\r\n            <MdAssignment /> take test\r\n          </Link>\r\n        </article>\r\n        <article className=\"quiz-card quiz-card--ts\">\r\n          <h2 className=\"quiz-card__title\">TypeScript</h2>\r\n          <p className=\"quiz-card__desc\">\r\n            This module contains ten basic questions to test your TypeScript\r\n            knowlage.\r\n          </p>\r\n          <Link to=\"/javascript\" className=\"quiz-card__link\">\r\n            <MdAssignment /> take test\r\n          </Link>\r\n        </article>\r\n        <article className=\"quiz-card quiz-card--py\">\r\n          <h2 className=\"quiz-card__title\">Python</h2>\r\n          <p className=\"quiz-card__desc\">\r\n            This module contains ten basic questions to test your Python\r\n            knowlage.\r\n          </p>\r\n          <Link to=\"/python\" className=\"quiz-card__link\">\r\n            <MdAssignment /> take test\r\n          </Link>\r\n        </article>\r\n        <article className=\"quiz-card quiz-card--java\">\r\n          <h2 className=\"quiz-card__title\">Java</h2>\r\n          <p className=\"quiz-card__desc\">\r\n            This module contains ten basic questions to test your Java knowlage.\r\n          </p>\r\n          <Link to=\"/java\" className=\"quiz-card__link\">\r\n            <MdAssignment /> take test\r\n          </Link>\r\n        </article>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","export const QBOOLEAN = \"QBOOLEAN\";\r\nexport const QMULTIPLE_CHOICE = \"QMULTIPLE_CHOICE\";\r\nexport const QMULTI_SELECT_CHOICE = \"QMULTI_SELECT_CHOICE\";\r\nexport const QFILL_IN_BLANK = \"QFILL_IN_BLANK\";\r\n\r\nexport interface IBooleanQuestion {\r\n  type: typeof QBOOLEAN;\r\n  title: string;\r\n  answer: boolean;\r\n  userAnswer: null | boolean;\r\n  mark?: number;\r\n}\r\n\r\nexport interface IMultipleChoiceOption {\r\n  key: string;\r\n  value: string;\r\n}\r\nexport interface IMultipleChoiceQuestion {\r\n  type: typeof QMULTIPLE_CHOICE;\r\n  title: string;\r\n  options: IMultipleChoiceOption[];\r\n  answer: string;\r\n  userAnswer: null | string;\r\n  mark?: number;\r\n}\r\n\r\nexport type QuestionTypes = IBooleanQuestion | IMultipleChoiceQuestion;\r\n\r\nexport interface IState {\r\n  user: {\r\n    score: number;\r\n  };\r\n  javascript: { totalQuestions: number; questions: QuestionTypes[] };\r\n}\r\n","import { QuestionTypes, QBOOLEAN, QMULTIPLE_CHOICE } from \"../types\";\r\n\r\nconst questions: QuestionTypes[] = [\r\n  {\r\n    type: QMULTIPLE_CHOICE,\r\n    title: \"Which key word is used to desclare variale in javascript\",\r\n    answer: \"let\",\r\n    options: [\r\n      {\r\n        key: \"let\",\r\n        value: \"let\",\r\n      },\r\n      {\r\n        key: \"int\",\r\n        value: \"int\",\r\n      },\r\n      {\r\n        key: \"variable\",\r\n        value: \"variable\",\r\n      },\r\n    ],\r\n    userAnswer: null,\r\n  },\r\n  {\r\n    type: QBOOLEAN,\r\n    title: \"JavaScript is a case sencitive language.\",\r\n    answer: true,\r\n    userAnswer: null,\r\n  },\r\n  {\r\n    type: QBOOLEAN,\r\n    title: \"JavaScript does not support int data type.\",\r\n    answer: true,\r\n    userAnswer: null,\r\n  },\r\n  {\r\n    type: QBOOLEAN,\r\n    title: \"JavaScript will not run on browsers.\",\r\n    answer: false,\r\n    userAnswer: null,\r\n  },\r\n  {\r\n    type: QBOOLEAN,\r\n    title: \"Variables desclared with 'const' keyword, can change it's value.\",\r\n    answer: false,\r\n    userAnswer: null,\r\n  },\r\n];\r\n\r\nexport default questions;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { IState } from \"../types\";\r\n\r\nimport questions from \"./questions\";\r\n\r\ntype SetAnswerPayloadType = { index: number; answer: any };\r\n\r\nconst javascriptSlice = createSlice({\r\n  name: \"javascript\",\r\n  initialState: { totalQuestions: questions.length, questions },\r\n  reducers: {\r\n    setAnswer(state, { payload }: PayloadAction<SetAnswerPayloadType>) {\r\n      const { index, answer } = payload;\r\n      if (state.questions[index]) {\r\n        state.questions[index].userAnswer = answer;\r\n      }\r\n    },\r\n    restAnswers(state) {\r\n      for (let question of state.questions) {\r\n        question.userAnswer = null;\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nconst questionSelector = (index: number) => {\r\n  return (state: IState) => {\r\n    return state.javascript.questions[index];\r\n  };\r\n};\r\n\r\nconst allQuestionSelector = (state: IState) => {\r\n  return state.javascript.questions;\r\n};\r\n\r\nconst questionLengthSelector = (state: IState) => {\r\n  return state.javascript.totalQuestions;\r\n};\r\n\r\nexport { questionSelector, allQuestionSelector, questionLengthSelector };\r\n\r\nexport const {\r\n  setAnswer: setAnswerActionCreator,\r\n  restAnswers: resetAnswerActionCreator,\r\n} = javascriptSlice.actions;\r\n\r\nexport default javascriptSlice.reducer;\r\n","import \"./boolean-quiz.scss\";\r\n\r\ninterface BooleanQuizNormalProps {\r\n  text: string;\r\n  status: \"unanswered\";\r\n  answer: boolean | null;\r\n  handleAnswerChange(answer: boolean): void;\r\n}\r\ninterface BooleanQuizAnswerdProps {\r\n  text: string;\r\n  answer: boolean | null;\r\n  status: \"answered\";\r\n}\r\n\r\nexport type BooleanQuizPropsTypes =\r\n  | BooleanQuizAnswerdProps\r\n  | BooleanQuizNormalProps;\r\n\r\nfunction BooleanQuiz(props: BooleanQuizPropsTypes) {\r\n  const { text, answer } = props;\r\n\r\n  const handleChange = (answer: boolean) => {\r\n    if (props.status === \"unanswered\") {\r\n      props.handleAnswerChange(answer);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={[props.status, \"boolean-quiz\"].join(\" \")}\r\n      data-testid=\"boolean-quiz\"\r\n    >\r\n      <pre className=\"boolean-quiz__question\">{text}</pre>\r\n      <ol className=\"boolean-quiz__ans-list\">\r\n        <li className=\"boolean-quiz__ans-item\">\r\n          <label\r\n            htmlFor={text + \"_true\"}\r\n            className={[\r\n              answer === true && props.status === \"answered\" ? \"correct\" : \"\",\r\n              \"boolean-quiz__ans\",\r\n            ].join(\" \")}\r\n          >\r\n            <input\r\n              type=\"radio\"\r\n              name={text}\r\n              id={text + \"_true\"}\r\n              checked={answer === true}\r\n              onChange={() => handleChange(true)}\r\n              disabled={props.status === \"answered\"}\r\n            />\r\n            true\r\n          </label>\r\n        </li>\r\n        <li className=\"boolean-quiz__ans-item\">\r\n          <label\r\n            htmlFor={text + \"_false\"}\r\n            className={[\r\n              answer === false && props.status === \"answered\" ? \"correct\" : \"\",\r\n              \"boolean-quiz__ans\",\r\n            ].join(\" \")}\r\n          >\r\n            <input\r\n              type=\"radio\"\r\n              name={text}\r\n              id={text + \"_false\"}\r\n              checked={answer === false}\r\n              onChange={() => handleChange(false)}\r\n              disabled={props.status === \"answered\"}\r\n            />\r\n            false\r\n          </label>\r\n        </li>\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BooleanQuiz;\r\n","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\n\r\nimport user from \"./user\";\r\nimport javascript from \"./javascript\";\r\nimport { IState } from \"./types\";\r\n\r\nexport const reducer = combineReducers({\r\n  user,\r\n  javascript,\r\n});\r\n\r\nexport type language = \"javascript\";\r\n\r\nconst allQuestionSelector = (lang: language) => {\r\n  return (store: IState) => {\r\n    return store[lang].questions;\r\n  };\r\n};\r\n\r\nexport { allQuestionSelector };\r\n\r\nexport default configureStore({\r\n  reducer,\r\n});\r\n","import { IMultipleChoiceOption } from \"../../redux/types\";\r\n\r\nimport \"./multi-choice-quiz.scss\";\r\n\r\ninterface MultiChoiceQuizNormalProps {\r\n  text: string;\r\n  status: \"unanswered\";\r\n  answer: string | null;\r\n  handleAnswerChange(answer: string): void;\r\n  options: IMultipleChoiceOption[];\r\n}\r\ninterface MultiChoiceQuizAnsweredProps {\r\n  text: string;\r\n  status: \"answered\";\r\n  answer: string | null;\r\n  options: IMultipleChoiceOption[];\r\n}\r\n\r\nexport type MultiChoiceQuizPropsTypes =\r\n  | MultiChoiceQuizNormalProps\r\n  | MultiChoiceQuizAnsweredProps;\r\n\r\nfunction MultiChoiceQuiz(props: MultiChoiceQuizPropsTypes) {\r\n  const { text, answer, options } = props;\r\n\r\n  const handleChange = (answer: string) => {\r\n    if (props.status === \"unanswered\") {\r\n      props.handleAnswerChange(answer);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={[props.status, \"multi-choice-quiz\"].join(\" \")}\r\n      data-testid=\"multi-choice-quiz\"\r\n    >\r\n      <pre className=\"multi-choice-quiz__question\">{text}</pre>\r\n      <ol className=\"multi-choice-quiz__ans-list\">\r\n        {options.map(({ key, value }) => (\r\n          <li key={key} className=\"multi-choice-quiz__ans-item\">\r\n            <label\r\n              htmlFor={text + key}\r\n              className={[\r\n                answer === value && props.status === \"answered\"\r\n                  ? \"correct\"\r\n                  : \"\",\r\n                \"multi-choice-quiz__ans\",\r\n              ].join(\" \")}\r\n            >\r\n              <input\r\n                type=\"radio\"\r\n                name={text}\r\n                id={text + key}\r\n                checked={answer === value}\r\n                onChange={() => handleChange(value)}\r\n                disabled={props.status === \"answered\"}\r\n              />\r\n              {key}\r\n            </label>\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MultiChoiceQuiz;\r\n","import { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { TiTick, TiHome, TiDocument } from \"react-icons/ti\";\r\nimport { ImCross, ImInfo } from \"react-icons/im\";\r\nimport Modal from \"react-modal\";\r\nimport CountUp from \"react-countup\";\r\n\r\nimport \"./finalize-answer.scss\";\r\nimport { resetAnswerActionCreator } from \"../../redux/javascript\";\r\nimport { language, allQuestionSelector } from \"../../redux\";\r\nimport BooleanQuiz from \"../../components/boolean-quiz\";\r\nimport MultiChoiceQuiz from \"../../components/multi-choice-quiz\";\r\nimport Header from \"../../components/header\";\r\nimport { incrementScoreByActionCreator } from \"../../redux/user\";\r\n\r\nexport interface IFinalizeAnswerProps {\r\n  language: language;\r\n}\r\n\r\nfunction convertAnswer(answer: any) {\r\n  return String(answer);\r\n}\r\n\r\nconst modalStyles = { content: { backgroundColor: \"orange\" } };\r\n\r\nfunction FinalizeAnswer({ language }: IFinalizeAnswerProps) {\r\n  const questions = useSelector(allQuestionSelector(language));\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const [isModalOpen, setModalOpen] = useState(true);\r\n  const closeModal = () => setModalOpen(false);\r\n  const openModel = () => setModalOpen(true);\r\n\r\n  const stats = questions.reduce(\r\n    (s, { answer, userAnswer, mark }) => {\r\n      s.totalQuestions++;\r\n      if (userAnswer === null) {\r\n        s.ignoredQuestions++;\r\n      } else if (answer === userAnswer) {\r\n        s.score += mark ?? 1;\r\n        s.correctQuestions++;\r\n      } else {\r\n        s.incorrectQuestions++;\r\n      }\r\n      return s;\r\n    },\r\n    {\r\n      score: 0,\r\n      totalQuestions: 0,\r\n      correctQuestions: 0,\r\n      ignoredQuestions: 0,\r\n      incorrectQuestions: 0,\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(incrementScoreByActionCreator(stats.score));\r\n    return () => void dispatch(resetAnswerActionCreator());\r\n  }, []);\r\n\r\n  return (\r\n    <main className=\"finalize-answer\">\r\n      <Header />\r\n      <Modal\r\n        isOpen={isModalOpen}\r\n        shouldCloseOnOverlayClick={false}\r\n        onRequestClose={closeModal}\r\n        style={modalStyles}\r\n        ariaHideApp={false}\r\n      >\r\n        <button\r\n          className=\"finalize-answer__modal-cls-btn\"\r\n          onClick={closeModal}\r\n          data-testid=\"modal-cls-btn\"\r\n        >\r\n          <ImCross />\r\n        </button>\r\n        <h2 className=\"finalize-answer__modal-title\">FINAL RESULT</h2>\r\n        <h2 className=\"finalize-answer__modal-title\">\r\n          SCORE ~ <CountUp end={stats.score} />\r\n        </h2>\r\n        <section className=\"finalize-answer__stats\">\r\n          <h3 data-testid=\"total-questions\">\r\n            Total Questions\r\n            <span className=\"quizs-nums\">{stats.totalQuestions}</span>\r\n          </h3>\r\n          <h3 data-testid=\"correct-questions\">\r\n            Correct Questions\r\n            <span className=\"quizs-nums\">{stats.correctQuestions}</span>\r\n          </h3>\r\n          <h3 data-testid=\"incorrect-questions\">\r\n            Incorrect Questions\r\n            <span className=\"quizs-nums\">{stats.incorrectQuestions}</span>\r\n          </h3>\r\n          <h3 data-testid=\"ignored-questions\">\r\n            Ignored Questions\r\n            <span className=\"quizs-nums\">{stats.ignoredQuestions}</span>\r\n          </h3>\r\n        </section>\r\n      </Modal>\r\n      <div className=\"finalize-answer__controls\">\r\n        <button\r\n          title=\"go to home\"\r\n          data-testid=\"go-home-btn\"\r\n          onClick={() => history.replace(\"/\")}\r\n        >\r\n          <TiHome size=\"1.5rem\" />\r\n        </button>\r\n        <button\r\n          title=\"view result\"\r\n          data-testid=\"modal-opn-btn\"\r\n          onClick={openModel}\r\n        >\r\n          <TiDocument size=\"1.5rem\" />\r\n        </button>\r\n      </div>\r\n      <ol className=\"finalize-answer__list container\">\r\n        {questions.map((question) => {\r\n          let comp = null;\r\n          if (question.type === \"QBOOLEAN\") {\r\n            comp = (\r\n              <BooleanQuiz\r\n                status=\"answered\"\r\n                text={question.title}\r\n                answer={question.answer}\r\n              />\r\n            );\r\n          } else if (question.type === \"QMULTIPLE_CHOICE\") {\r\n            comp = (\r\n              <MultiChoiceQuiz\r\n                status=\"answered\"\r\n                text={question.title}\r\n                answer={question.answer}\r\n                options={question.options}\r\n              />\r\n            );\r\n          }\r\n          return (\r\n            <li key={question.title} className=\"finalize-answer__item\">\r\n              {comp}\r\n\r\n              <div className=\"finalize-answer__status\">\r\n                Correct :{\" \"}\r\n                {question.userAnswer === question.answer ? (\r\n                  <TiTick className=\"finalize-answer__correct\" />\r\n                ) : (\r\n                  <ImCross className=\"finalize-answer__wrong\" />\r\n                )}\r\n              </div>\r\n\r\n              {question.userAnswer !== question.answer && (\r\n                <>\r\n                  <div className=\"finalize-answer__status\">\r\n                    Correct Answer : {convertAnswer(question.answer)}\r\n                  </div>\r\n\r\n                  <div className=\"finalize-answer__status\">\r\n                    <ImInfo className=\"finalize-answer__info\" />{\" \"}\r\n                    {question.userAnswer === null\r\n                      ? \"You ignored this question.\"\r\n                      : `Your Answer : ${convertAnswer(question.userAnswer)}`}\r\n                  </div>\r\n                </>\r\n              )}\r\n            </li>\r\n          );\r\n        })}\r\n      </ol>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default FinalizeAnswer;\r\n","import { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport \"./javascript-quiz.scss\";\r\nimport {\r\n  setAnswerActionCreator,\r\n  questionSelector,\r\n  questionLengthSelector,\r\n} from \"../../redux/javascript\";\r\nimport Header from \"../../components/header\";\r\nimport BooleanQuiz from \"../../components/boolean-quiz\";\r\nimport FinalizeAnswer from \"../finalize-answer\";\r\nimport MultiChoiceQuiz from \"../../components/multi-choice-quiz\";\r\n\r\nfunction JavaScriptQuizs() {\r\n  const [questionNumber, setQuestionNumber] = useState<number>(0);\r\n  const question = useSelector(questionSelector(questionNumber));\r\n  const totalQuestions = useSelector(questionLengthSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  const goToNextQuestion = () => {\r\n    setQuestionNumber((prv) => prv + 1);\r\n  };\r\n\r\n  if (questionNumber >= totalQuestions) {\r\n    return <FinalizeAnswer language=\"javascript\" />;\r\n  }\r\n\r\n  const handleAnswerChange = (answer: any) => {\r\n    dispatch(setAnswerActionCreator({ index: questionNumber, answer }));\r\n  };\r\n\r\n  let comp = null;\r\n  if (question.type === \"QBOOLEAN\") {\r\n    comp = (\r\n      <BooleanQuiz\r\n        status=\"unanswered\"\r\n        text={question.title}\r\n        answer={question.userAnswer}\r\n        handleAnswerChange={handleAnswerChange}\r\n      />\r\n    );\r\n  } else if (question.type === \"QMULTIPLE_CHOICE\") {\r\n    comp = (\r\n      <MultiChoiceQuiz\r\n        status=\"unanswered\"\r\n        text={question.title}\r\n        answer={question.userAnswer}\r\n        options={question.options}\r\n        handleAnswerChange={handleAnswerChange}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <main className=\"javascript-quiz\">\r\n      <Header />\r\n      <section className=\"javascript-quiz__question container\">\r\n        {comp}\r\n        <button\r\n          className=\"javascript-quiz__next-btn\"\r\n          onClick={goToNextQuestion}\r\n        >\r\n          NEXT\r\n        </button>\r\n      </section>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default JavaScriptQuizs;\r\n","import { memo } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport \"./App.scss\";\nimport Home from \"./pages/home\";\nimport JavaScriptQuizs from \"./pages/javascript-quiz\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/javascript\" component={JavaScriptQuizs} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default memo(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\n\nimport store from \"./redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}